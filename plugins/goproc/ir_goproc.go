package goproc

import (
	"fmt"
	"path/filepath"
	"strings"

	"gitlab.mpi-sws.org/cld/blueprint/blueprint/pkg/blueprint"
	"gitlab.mpi-sws.org/cld/blueprint/blueprint/pkg/core/irutil"
	"gitlab.mpi-sws.org/cld/blueprint/blueprint/pkg/core/process"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gogen"
	"golang.org/x/exp/slog"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

/*
This file contains the implementation of the golang.Process IRNode.

The `GenerateArtifacts` method generates the main method based on the process's contained nodes.

Most of the heavy lifting of code generation is done by the following:
* gogen/workspacebuilder
* gogen/modulebuilder
* gogen/graphbuilder

*/

var generatedModulePrefix = "gitlab.mpi-sws.org/cld/blueprint/plugins/golang/process"

// An IRNode representing a golang process.
// This is Blueprint's main implementation of Golang processes
type Process struct {
	blueprint.IRNode
	process.ProcessNode
	process.ArtifactGenerator

	InstanceName   string
	ArgNodes       []blueprint.IRNode
	ContainedNodes []blueprint.IRNode
}

// A Golang Process Node can either be given the child nodes ahead of time, or they can be added using AddArtifactNode / AddCodeNode
func newGolangProcessNode(name string) *Process {
	node := Process{}
	node.InstanceName = name
	return &node
}

func (node *Process) Name() string {
	return node.InstanceName
}

func (node *Process) String() string {
	var b strings.Builder
	b.WriteString(node.InstanceName)
	b.WriteString(" = GolangProcessNode(")
	var args []string
	for _, arg := range node.ArgNodes {
		args = append(args, arg.Name())
	}
	b.WriteString(strings.Join(args, ", "))
	b.WriteString(") {\n")
	var children []string
	for _, child := range node.ContainedNodes {
		children = append(children, child.String())
	}
	b.WriteString(blueprint.Indent(strings.Join(children, "\n"), 2))
	b.WriteString("\n}")
	return b.String()
}

func (node *Process) AddArg(argnode blueprint.IRNode) {
	node.ArgNodes = append(node.ArgNodes, argnode)
}

func (node *Process) AddChild(child blueprint.IRNode) error {
	node.ContainedNodes = append(node.ContainedNodes, child)
	return nil
}

type mainArg struct {
	Name string
	Doc  string
	Var  string
}

type mainTemplateArgs struct {
	Name             string
	GraphPackage     string
	GraphConstructor string
	Args             []mainArg
	Instantiate      []string
}

var mainTemplate = `// This file is auto-generated by the Blueprint goproc plugin
package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"os/signal"

	"{{.GraphPackage}}"
	"golang.org/x/exp/slog"
)

func checkArg(name, value string) {
	if value == "" {
		slog.Error("No value set for required cmd line argument " + name)
		os.Exit(1)
	} else {
		slog.Info(fmt.Sprintf("Arg %v = %v", name, value))
	}
}

func main() {
	slog.Info("Running {{.Name}}")
	{{- range $i, $arg := .Args}}
	{{$arg.Var}} := flag.String("{{$arg.Name}}", "", "Argument automatically generated from Blueprint IR: {{$arg.Doc}}")
	{{end}}

	flag.Parse()

	{{range $i, $arg := .Args -}}
	checkArg("{{$arg.Name}}", *{{$arg.Var}})
	{{end}}
	
	graphArgs := map[string]string{
		{{- range $i, $arg := .Args}}
		"{{$arg.Name}}": *{{$arg.Var}},
		{{- end}}
	}

	ctx, cancel := context.WithCancel(context.Background())
	graph, err := {{.GraphConstructor}}(ctx, cancel, graphArgs)
	if err != nil {
		slog.Error(err.Error())
		return
	}

	{{range $i, $node := .Instantiate -}}
	_, err = graph.Get("{{$node}}")
	if err != nil {
		slog.Error(err.Error())
		os.Exit(1)
	}
	{{end}}
	
	signals := make(chan os.Signal, 1)
	signal.Notify(signals, os.Interrupt)
	go func() {
		for sig := range signals {
			slog.Info(fmt.Sprintf("{{.Name}} received %v\n", sig))
			cancel()
		}
	}()

	graph.WaitGroup().Wait()

	slog.Info("{{.Name}} exiting")
}`

func (node *Process) GenerateArtifacts(outputDir string) error {
	err := gogen.CheckDir(outputDir, true)
	if err != nil {
		return fmt.Errorf("unable to create %s for process %s due to %s", outputDir, node.Name(), err.Error())
	}

	// TODO: might end up building multiple times which is OK, so need a check here that we haven't already built this artifact, even if it was by a different (but identical) node
	slog.Info(fmt.Sprintf("Building %s to %s\n", node.Name(), outputDir))

	procName := irutil.Clean(node.Name())
	workspaceDir := filepath.Join(outputDir, procName)
	workspace, err := gogen.NewWorkspaceBuilder(workspaceDir)
	if err != nil {
		return err
	}

	moduleName := generatedModulePrefix + "/" + procName
	module, err := gogen.NewModuleBuilder(workspace, moduleName)
	if err != nil {
		return err
	}

	graphFileName := strings.ToLower(procName) + ".go"
	procPackage := "goproc"
	constructorName := "New" + cases.Title(language.BritishEnglish).String(procName)
	graph, err := gogen.NewGraphBuilder(module, graphFileName, procPackage, constructorName)
	if err != nil {
		return err
	}

	// Generate the workspace and copy all local artifacts
	err = workspace.Visit(node.ContainedNodes)
	if err != nil {
		return err
	}

	// Generate the module and add all dependencies
	err = module.Visit(node.ContainedNodes)
	if err != nil {
		return err
	}

	// Generate the graph of gonodes contained in this process
	err = graph.Visit(node.ContainedNodes)
	if err != nil {
		return err
	}

	// Generate the main.go
	mainArgs := mainTemplateArgs{
		Name:             node.Name(),
		GraphPackage:     fmt.Sprintf("%s/%s", module.Name, procPackage),
		GraphConstructor: fmt.Sprintf("%s.%s", procPackage, constructorName),
		Args:             nil,
		Instantiate:      nil,
	}
	for _, arg := range node.ArgNodes {
		mainArgs.Args = append(mainArgs.Args, mainArg{
			Name: arg.Name(),
			Doc:  arg.String(),
			Var:  irutil.Clean(arg.Name()),
		})
	}
	// For now explicitly instantiate every child node
	for _, child := range node.ContainedNodes {
		if _, isInstantiable := child.(golang.Instantiable); isInstantiable {
			mainArgs.Instantiate = append(mainArgs.Instantiate, child.Name())
		}
	}

	mainFileName := filepath.Join(module.ModuleDir, "main.go")
	err = gogen.ExecuteTemplateToFile("goprocMain", mainTemplate, mainArgs, mainFileName)
	if err != nil {
		return err
	}

	// Build workspace, module, and graph
	err = graph.Build()
	if err != nil {
		return err
	}

	err = workspace.Finish()
	if err != nil {
		return err
	}

	return nil
}
