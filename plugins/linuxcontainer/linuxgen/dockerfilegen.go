package linuxgen

import (
	"path/filepath"
)

type Dockerfile struct {
	WorkspaceName string
	WorkspaceDir  string
	FilePath      string
	CustomProcs   map[string]string
	DefaultProcs  map[string]string
}

func NewDockerfile(workspaceName, workspaceDir string) *Dockerfile {
	return &Dockerfile{
		WorkspaceName: workspaceName,
		WorkspaceDir:  workspaceDir,
		FilePath:      filepath.Join(workspaceDir, "Dockerfile"),
		CustomProcs:   make(map[string]string),
		DefaultProcs:  make(map[string]string),
	}
}

func (d *Dockerfile) AddCustomCommands(procName string, commands string) {
	d.CustomProcs[procName] = commands
}

func (d *Dockerfile) Generate(procDirs map[string]string) error {
	d.DefaultProcs = procDirs
	return ExecuteTemplateToFile("linuxgen/dockerfilegen.go", dockerfileTemplate, d, d.FilePath)
}

var dockerfileTemplate = `# syntax=docker/dockerfile:1

#####
# Auto-generated Dockerfile for process workspace {{.WorkspaceName}}
#   Dockerfile auto-generated by linuxcontainer plugin
#   Code generation located at linuxcontainer/linuxgen/dockerfilegen.go
#

###
# Step 1: run custom commands provided by processes
###

{{range $_, $Commands := .CustomProcs}}
{{$Commands}}
{{end}}


###
# Step 2: create final image
###

FROM gcr.io/distroless/base-debian10
COPY . /

# Copy artifacts for processes that didn't have custom build commands
{{range $ProcName, $_ := .DefaultProcs -}}
COPY ./{{$ProcName}} /{{$ProcName}}
{{end}}

# Copy artifacts for processes with custom build commands
{{range $ProcName, $_ := .CustomProcs -}}
COPY --from={{$ProcName}} /{{$ProcName}} /{{$ProcName}}
{{end}}

# Copy the build.sh file and run it
WORKDIR /
COPY ./build.sh /
RUN ./build.sh

# Copy the run.sh file and configure the entrypoint
WORKDIR /
COPY ./run.sh /
ENTRYPOINT ["/run.sh"]
`
