package clientpool

import (
	"fmt"
	"path/filepath"
	"strings"

	"gitlab.mpi-sws.org/cld/blueprint/blueprint/pkg/blueprint"
	"gitlab.mpi-sws.org/cld/blueprint/blueprint/pkg/core/service"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gogen"
	"golang.org/x/exp/slog"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

type ClientPool struct {
	golang.Service
	golang.GeneratesFuncs

	PoolName       string
	N              int
	Client         golang.Service
	ArgNodes       []blueprint.IRNode
	ContainedNodes []blueprint.IRNode
}

func newClientPool(name string, n int) *ClientPool {
	return &ClientPool{
		PoolName: name,
		N:        n,
	}
}

func (node *ClientPool) Name() string {
	return node.PoolName
}

func (node *ClientPool) String() string {
	var b strings.Builder
	b.WriteString(fmt.Sprintf("%v = ClientPool(%v, %v) {\n", node.PoolName, node.Client.Name(), node.N))
	var children []string
	for _, child := range node.ContainedNodes {
		children = append(children, child.String())
	}
	b.WriteString(blueprint.Indent(strings.Join(children, "\n"), 2))
	b.WriteString("\n}")
	return b.String()
}

func (pool *ClientPool) AddArg(argnode blueprint.IRNode) {
	pool.ArgNodes = append(pool.ArgNodes, argnode)
}

func (pool *ClientPool) AddChild(child blueprint.IRNode) error {
	pool.ContainedNodes = append(pool.ContainedNodes, child)
	return nil
}

func (pool *ClientPool) GetInterface(ctx blueprint.BuildContext) (service.ServiceInterface, error) {
	/* ClientPool doesn't modify the client's interface and doesn't introduce new interfaces */
	return pool.Client.GetInterface(ctx)
}

func (pool *ClientPool) AddInterfaces(module golang.ModuleBuilder) error {
	/* ClientPool doesn't modify the client's interface and doesn't introduce new interfaces */
	return pool.Client.AddInterfaces(module)
}

func (pool *ClientPool) GenerateFuncs(module golang.ModuleBuilder) error {
	if module.Visited(pool.PoolName) {
		return nil
	}

	// First generate the graph code used by the clientpool
	name := blueprint.CleanName(pool.PoolName)
	packageName := "clientpool"
	graphFileName := name + "_client.go"
	constructorName := "New" + cases.Title(language.BritishEnglish).String(name)
	graph, err := gogen.NewGraphBuilder(module, graphFileName, packageName, constructorName)
	if err != nil {
		return err
	}

	// Add instantiation code for everything within the pool
	for _, node := range pool.ContainedNodes {
		if inst, canInstantiate := node.(golang.Instantiable); canInstantiate {
			if err := inst.AddInstantiation(graph); err != nil {
				return err
			}
		}
	}

	// Generate the graph code
	if err = graph.Build(); err != nil {
		return err
	}

	// Generate the client pool code
	templateArgs := poolTemplateArgs{}
	poolFileName := filepath.Join(module.Info().Path, packageName, name+".go")
	return gogen.ExecuteTemplateToFile("goprocMain", poolTemplate, templateArgs, poolFileName)
}

func (pool *ClientPool) AddInstantiation(builder golang.GraphBuilder) error {
	if builder.Visited(pool.PoolName) {
		return nil
	}

	templateArgs := buildPoolTemplateArgs{}

	slog.Info(fmt.Sprintf("Instantiating ClientPool %v in %v/%v", pool.PoolName, builder.Info().Package.PackageName, builder.Info().FileName))
	code, err := gogen.ExecuteTemplate("declareClientPool", buildPoolTemplate, templateArgs)
	if err != nil {
		return err
	}
	return builder.Declare(pool.PoolName, code)
}

type (
	poolTemplateArgs struct {
	}
	buildPoolTemplateArgs struct {
	}
)

var buildPoolTemplate = `func(ctr golang.Container) (any, error) {
	return nil, fmt.Errorf("not implemented yet")
}`

var poolTemplate = `// This file is auto-generated by the Blueprint clientpool plugin
package clientpool`
