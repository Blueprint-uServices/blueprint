package timeouts

import (
	"fmt"
	"path/filepath"

	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gocode"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gogen"
	"golang.org/x/exp/slog"
)

// code generation function called from the ir.go file
func generateClient(builder golang.ModuleBuilder, wrapped *gocode.ServiceInterface, outputPackage string) error {
	pkg, err := builder.CreatePackage(outputPackage)
	if err != nil {
		return err
	}

	client := clientArgs{
		Package: pkg,
		Service: wrapped,
		Name:    wrapped.BaseName + "_TimeoutClient",
		Imports: gogen.NewImports(pkg.Name),
	}

	client.Imports.AddPackages("context", "time", "errors")
	slog.Info(fmt.Sprintf("Generating %v/%v", client.Package.PackageName, wrapped.BaseName+"_TimeoutClient"))
	outputFile := filepath.Join(client.Package.Path, wrapped.BaseName+"_TimeoutClient.go")

	return gogen.ExecuteTemplateToFile("Timeouts", clientTemplate, client, outputFile)
}

type clientArgs struct {
	Package golang.PackageInfo
	Service *gocode.ServiceInterface
	Name    string
	Imports *gogen.Imports
}

var clientTemplate = `// Blueprint: Auto-generated by Timeouts Plugin
package {{.Package.ShortName}}

{{.Imports}}

type {{.Name}} struct {
	Client {{.Imports.NameOf .Service.UserType}}
	Timeout time.Duration
}

func New_{{.Name}} (ctx context.Context, client {{.Imports.NameOf .Service.UserType}}, timeout string) (*{{.Name}}, error) {
	handler := &{{.Name}}{}
	tout, err := time.ParseDuration(timeout)
	if err != nil {
		return nil, err
	}
	handler.Timeout = tout
	handler.Client = client
	return handler, nil
}

{{$service := .Service.Name -}}
{{$receiver := .Name -}}
{{ range $_, $f := .Service.Methods }}
func (client *{{$receiver}}) {{$f.Name -}} ({{ArgVarsAndTypes $f "ctx context.Context"}}) ({{RetVarsAndTypes $f "err error"}}) {
	ctx, cancel := context.WithDeadline(ctx, time.Now().Add(client.Timeout))
	defer cancel()
	is_complete := make(chan bool)
	go func() {
		{{RetVars $f "err"}} = client.Client.{{$f.Name}}({{ArgVars $f "ctx"}})
		is_complete <- true
	}()

	// Wait till we either complete the request or it gets timed out
	select {
	case <-ctx.Done():
		err = errors.New("Request was timed out")
		return
	case <-is_complete:
		return
	}
}
{{end}}
`
