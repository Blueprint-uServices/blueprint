package govector

import (
	"fmt"
	"path/filepath"

	"github.com/blueprint-uservices/blueprint/blueprint/pkg/blueprint"
	"github.com/blueprint-uservices/blueprint/blueprint/pkg/coreplugins/service"
	"github.com/blueprint-uservices/blueprint/blueprint/pkg/ir"
	"github.com/blueprint-uservices/blueprint/plugins/golang"
	"github.com/blueprint-uservices/blueprint/plugins/golang/gocode"
	"github.com/blueprint-uservices/blueprint/plugins/golang/gogen"
	"golang.org/x/exp/slog"
)

// Blueprint IR Node that wraps the client-side of a service to generate govec logs
type GovecClientWrapper struct {
	golang.Service
	golang.Instantiable
	golang.GeneratesFuncs

	InstanceName  string
	outputPackage string
	Wrapped       golang.Service
	GoVecClient   *GoVecLoggerClient
}

// Implements ir.IRNode
func (node *GovecClientWrapper) Name() string {
	return node.InstanceName
}

// Implements ir.IRNode
func (node *GovecClientWrapper) String() string {
	return node.Name() + " = GovecClientWrapper(" + node.Wrapped.Name() + ")"
}

// Implements golang.Node
func (node *GovecClientWrapper) ImplementsGolangNode() {}

// Implements golang.Service
func (node *GovecClientWrapper) ImplementsGolangService() {}

func newGovecClientWrapper(name string, wrapped golang.Service) (*GovecClientWrapper, error) {
	node := &GovecClientWrapper{}
	node.InstanceName = name
	node.outputPackage = "govec"
	node.Wrapped = wrapped
	return node, nil
}

func (node *GovecClientWrapper) genInterface(ctx ir.BuildContext) (*gocode.ServiceInterface, error) {
	iface, err := golang.GetGoInterface(ctx, node.Wrapped)
	if err != nil {
		return nil, err
	}
	module_ctx, valid := ctx.(golang.ModuleBuilder)
	if !valid {
		return nil, blueprint.Errorf("GoVecClientWrapper expected build context to be a ModuleBuilder, got %v", ctx)
	}
	i := gocode.CopyServiceInterface(fmt.Sprintf("%v_GoVecClientWrapperInterface", iface.BaseName), module_ctx.Info().Name+"/"+node.outputPackage, iface)
	for name, method := range i.Methods {
		method.Arguments = method.Arguments[:len(method.Arguments)-1]
		method.Returns = method.Returns[:len(method.Returns)-1]
		i.Methods[name] = method
	}
	return i, nil
}

// Implements golang.Instantiable
func (node *GovecClientWrapper) AddInstantiation(builder golang.NamespaceBuilder) error {
	if builder.Visited(node.InstanceName) {
		return nil
	}

	iface, err := golang.GetGoInterface(builder, node.Wrapped)
	if err != nil {
		return err
	}

	constructor := &gocode.Constructor{
		Package: builder.Module().Info().Name + "/" + node.outputPackage,
		Func: gocode.Func{
			Name: fmt.Sprintf("New_%v_GoVecClientWrapper", iface.BaseName),
			Arguments: []gocode.Variable{
				{Name: "ctx", Type: &gocode.UserType{Package: "context", Name: "Context"}},
				{Name: "client", Type: iface},
			},
		},
	}
	return builder.DeclareConstructor(node.InstanceName, constructor, []ir.IRNode{node.Wrapped})
}

// Implements golang.GeneratesFuncs
func (node *GovecClientWrapper) GenerateFuncs(builder golang.ModuleBuilder) error {
	wrapped_iface, err := golang.GetGoInterface(builder, node.Wrapped)
	if err != nil {
		return err
	}

	impl_iface, err := node.genInterface(builder)
	if err != nil {
		return err
	}

	return generateClientHandler(builder, wrapped_iface, impl_iface, node.outputPackage)
}

// Implements service.ServiceNode
func (node *GovecClientWrapper) GetInterface(ctx ir.BuildContext) (service.ServiceInterface, error) {
	return node.genInterface(ctx)
}

// Implements golang.ProvidesInterface
func (node *GovecClientWrapper) AddInterfaces(builder golang.ModuleBuilder) error {
	return node.Wrapped.AddInterfaces(builder)
}

func generateClientHandler(builder golang.ModuleBuilder, wrapped *gocode.ServiceInterface, impl *gocode.ServiceInterface, outputPackage string) error {
	pkg, err := builder.CreatePackage(outputPackage)
	if err != nil {
		return err
	}

	client := &clientArgs{
		Package:         pkg,
		Service:         wrapped,
		Impl:            impl,
		Name:            wrapped.BaseName + "_GoVecClientWrapper",
		IfaceName:       impl.Name,
		ServerIfaceName: wrapped.BaseName + "_GoVecServerWrapperInterface",
		Imports:         gogen.NewImports(pkg.Name),
	}

	client.Imports.AddPackages("context", "github.com/blueprint-uservices/blueprint/runtime/plugins/govector", "errors")

	slog.Info(fmt.Sprintf("Generating %v/%v", client.Package.PackageName, impl.Name))
	outputFile := filepath.Join(client.Package.Path, impl.Name+".go")
	return gogen.ExecuteTemplateToFile("GoVector", clientTemplate, client, outputFile)
}

type clientArgs struct {
	Package         golang.PackageInfo
	Service         *gocode.ServiceInterface
	Impl            *gocode.ServiceInterface
	Name            string
	IfaceName       string
	ServerIfaceName string
	Imports         *gogen.Imports
}

var clientTemplate = `// Blueprint: Auto-generated by GoVector Plugin
package {{.Package.ShortName}}

{{.Imports}}

type {{.IfaceName}} interface {
	{{range $_, $f := .Impl.Methods -}}
	{{Signature $f}}
	{{end}}
}

type {{.Name}} struct {
	Client {{.ServerIfaceName}}
	logger *govector.GoVecLogger
}

func New_{{.Name}}(ctx context.Context, client {{.ServerIfaceName}}) (*{{.Name}}, error) {
	handler := &{{.Name}}{}
	handler.Client = client
	handler.logger = govector.GetLogger()
	if handler.logger == nil {
		return nil, errors.New("GoVector logger is not initialized")
	}
	return handler, nil
}

{{$service := .Service.Name -}}
{{$receiver := .Name -}}
{{range $_, $f := .Impl.Methods}}
func (handler *{{$receiver}}) {{$f.Name -}} ({{ArgVarsAndTypes $f "ctx context.Context"}}) ({{RetVarsAndTypes $f "err error"}}) {
	var govec_bytes, govec_ret []byte
	govec_bytes, _ = handler.logger.GetSendCtx(ctx, "Preparing to make request for function {{$f.Name}}")
	{{RetVars $f "govec_ret" "err"}} = handler.Client.{{$f.Name}}({{ArgVars $f "ctx"}}, govec_bytes)
	handler.logger.UnpackReceiveCtx(ctx, "Unpacking response from server", govec_ret)
	return
}
{{end}}
`
