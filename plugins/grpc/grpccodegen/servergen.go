package grpccodegen

import (
	"os"
	"path/filepath"
	"strings"

	"gitlab.mpi-sws.org/cld/blueprint/blueprint/pkg/blueprint"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gocode"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gogen"
)

/*
This function is used by the GRPC plugin to generate the server-side GRPC service.

It is assumed that outputPackage is the same as the one where the .proto is generated to
*/
func GenerateServerHandler(builder golang.ModuleBuilder, service *gocode.ServiceInterface, outputPackage string) error {
	server := &serverTemplateArgs{}
	server.Builder = builder
	splits := strings.Split(outputPackage, "/")
	outputPackageName := splits[len(splits)-1]
	server.PackageName = builder.Info().Name + "/" + outputPackage
	server.PackageShortName = outputPackageName
	server.Service = service
	server.Name = service.Name + "_GRPCServerHandler"

	outputDir := filepath.Join(builder.Info().Path, filepath.Join(splits...))
	err := os.MkdirAll(outputDir, 0755)
	if err != nil {
		return blueprint.Errorf("unable to create grpc output dir %v due to %v", outputDir, err.Error())
	}

	server.Imports = gogen.NewImports(server.PackageName)
	server.Imports.AddPackages(serverImportedPackages...)

	outputFile := filepath.Join(outputDir, service.Name+"_GRPCServer.go")
	return gogen.ExecuteTemplateToFile("GRPCServer", serverTemplate, server, outputFile)
}

var serverImportedPackages = []string{
	"context", "net",
	"google.golang.org/grpc",
}

/*
Arguments to the template code
*/
type serverTemplateArgs struct {
	Builder          golang.ModuleBuilder
	PackageName      string // fully qualified package name
	PackageShortName string // package shortname
	FilePath         string
	Service          *gocode.ServiceInterface
	Name             string         // Name of the generated wrapper class
	Imports          *gogen.Imports // Manages imports for us
}

var serverTemplate = `// Blueprint: Auto-generated by GRPC Plugin
package {{.PackageShortName}}

{{.Imports}}

type {{.Name}} struct {
	Unimplemented{{.Service.Name}}Server
	Service {{.Imports.NameOf .Service.UserType}}
	Address string
}

func New_{{.Name}}(service {{.Imports.NameOf .Service.UserType}}, serverAddress string) (*{{.Name}}, error) {
	handler := &{{.Name}}{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *{{.Name}}) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	Register{{.Service.Name}}Server(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}

{{$service := .Service.Name -}}
{{$receiver := .Name -}}
{{ range $_, $f := .Service.Methods }}
func (handler *{{$receiver}}) {{$f.Name -}}
		(ctx context.Context, req *{{$service}}_{{$f.Name}}_Request) (*{{$service}}_{{$f.Name}}_Response, error) {
	{{ArgVars $f}} := req.unmarshall()
	{{RetVars $f "err"}} := handler.Service.{{$f.Name}}({{ArgVars $f "ctx"}})
	if err != nil {
		return nil, err
	}

	rsp := &{{$service}}_{{$f.Name}}_Response{}
	rsp.marshall({{RetVars $f}})
	return rsp, nil
}
{{end}}
`
