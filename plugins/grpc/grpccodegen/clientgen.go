package grpccodegen

import (
	"os"
	"path/filepath"
	"strings"

	"gitlab.mpi-sws.org/cld/blueprint/blueprint/pkg/blueprint"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gocode"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gogen"
)

/*
This function is used by the GRPC plugin to generate the client-side caller of the GRPC service.

It is assumed that outputPackage is the same as the one where the .proto is generated to
*/
func GenerateClient(builder golang.ModuleBuilder, service *gocode.ServiceInterface, outputPackage string) error {
	client := &clientArgs{}
	client.Builder = builder
	splits := strings.Split(outputPackage, "/")
	outputPackageName := splits[len(splits)-1]
	client.PackageName = builder.Info().Name + "/" + outputPackage
	client.PackageShortName = outputPackageName
	client.Service = service
	client.Name = service.Name + "_GRPCClient"

	outputDir := filepath.Join(builder.Info().Path, filepath.Join(splits...))
	err := os.MkdirAll(outputDir, 0755)
	if err != nil {
		return blueprint.Errorf("unable to create grpc output dir %v due to %v", outputDir, err.Error())
	}

	client.Imports = gogen.NewImports(client.PackageName)
	client.Imports.AddPackages(clientImportedPackages...)

	outputFile := filepath.Join(outputDir, service.Name+"_GRPCClient.go")
	return gogen.ExecuteTemplateToFile("GRPCClient", clientTemplate, client, outputFile)
}

var clientImportedPackages = []string{
	"context", "time",
	"google.golang.org/grpc",
	"google.golang.org/grpc/credentials/insecure",
}

/*
Arguments to the template code
*/
type clientArgs struct {
	Builder          golang.ModuleBuilder
	PackageName      string // fully qualified package name
	PackageShortName string // package shortname
	FilePath         string
	Service          *gocode.ServiceInterface
	Name             string         // Name of the generated client class
	Imports          *gogen.Imports // Manages imports for us
}

var clientTemplate = `// Blueprint: Auto-generated by GRPC Plugin
package {{.PackageShortName}}

{{.Imports}}

type {{.Name}} struct {
	{{.Imports.NameOf .Service.UserType}}
	Client {{.Service.Name}}Client // The actual GRPC-generated client
	Timeout time.Duration
}

func New_{{.Name}}(serverAddress string) (*{{.Name}}, error) {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	opts = append(opts, grpc.WithTimeout(duration))
	conn, err := grpc.Dial(serverAddress, opts...)
	if err != nil {
		return nil, err
	}

	c := &{{.Name}}{}
	c.Client = New{{.Service.Name}}Client(conn)
	c.Timeout = duration
	return c, nil
}

{{$service := .Service.Name -}}
{{$receiver := .Name -}}
{{- range $_, $f := .Service.Methods }}
func (client *{{$receiver}}) {{SignatureWithRetVars $f}} {
	// Create and marshall the GRPC Request object
	req := &{{$service}}_{{$f.Name}}_Request{}
	req.marshall({{ArgVars $f}})

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.{{$f.Name}}(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	{{RetVars $f}} = rsp.unmarshall()
	return
}
{{end}}
`
