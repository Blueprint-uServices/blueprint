package grpccodegen

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gocode"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gogen"
)

/*
This function is used by the GRPC plugin to generate the client-side caller of the GRPC service.

It is assumed that outputPackage is the same as the one where the .proto is generated to
*/
func GenerateClient(builder golang.ModuleBuilder, service *gocode.ServiceInterface, outputPackage string) error {
	client := &clientArgs{}
	client.Builder = builder
	splits := strings.Split(outputPackage, "/")
	outputPackageName := splits[len(splits)-1]
	client.PackageName = builder.Info().Name + "/" + outputPackage
	client.PackageShortName = outputPackageName
	client.Service = service
	client.Name = service.Name + "_GRPCClient"

	outputDir := filepath.Join(builder.Info().Path, filepath.Join(splits...))
	err := os.MkdirAll(outputDir, 0755)
	if err != nil {
		return fmt.Errorf("unable to create grpc output dir %v due to %v", outputDir, err.Error())
	}

	err = client.initImports()
	if err != nil {
		return err
	}

	outputFilename := service.Name + "_GRPCClient.go"
	return client.GenerateCode(filepath.Join(outputDir, outputFilename))
}

var clientRequiredModules = map[string]string{
	"google.golang.org/grpc": "v1.41.0",
}
var clientImportedPackages = []string{
	"context", "time",
	"google.golang.org/grpc",
	"google.golang.org/grpc/credentials/insecure",
}

/*
Arguments to the template code
*/
type clientArgs struct {
	Builder          golang.ModuleBuilder
	PackageName      string // fully qualified package name
	PackageShortName string // package shortname
	FilePath         string
	Service          *gocode.ServiceInterface
	Name             string         // Name of the generated client class
	Imports          *gogen.Imports // Manages imports for us
}

func (client *clientArgs) importType(t gocode.TypeName) error {
	client.Imports.AddType(t)
	return client.Builder.RequireType(t)
}

func (client *clientArgs) initImports() error {
	// In addition to a few GRPC-related requirements,
	// we also depend on the modules that define the
	// argument types to the RPC methods
	client.Imports = gogen.NewImports(client.PackageName)

	for name, version := range clientRequiredModules {
		err := client.Builder.Require(name, version)
		if err != nil {
			return err
		}
	}

	for _, pkg := range clientImportedPackages {
		client.Imports.AddPackage(pkg)
	}

	for _, f := range client.Service.Methods {
		for _, v := range f.Arguments {
			err := client.importType(v.Type)
			if err != nil {
				return err
			}
		}
		for _, v := range f.Returns {
			err := client.importType(v.Type)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

var clientTemplate = `// Blueprint: Auto-generated by GRPC Plugin
package {{.PackageShortName}}

{{.Imports}}

type {{.Name}} struct {
	{{.Imports.NameOf .Service}}
	Client {{.Service.Name}}Client // The actual GRPC-generated client
	Timeout time.Duration
}

func New_{{.Name}}(serverAddress string) (*{{.Name}}, error) {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	opts = append(opts, grpc.WithTimeout(duration))
	conn, err := grpc.Dial(serverAddress, opts...)
	if err != nil {
		return nil, err
	}

	c := &{{.Name}}{}
	c.Client = New{{.Service.Name}}Client(conn)
	c.Timeout = duration
	return c, nil
}

{{$service := .Service.Name -}}
{{$receiver := .Name -}}
{{$imports := .Imports -}}
{{- range $_, $f := .Service.Methods }}
func (client *{{$receiver}}) {{$f.Name}}(ctx context.Context
	{{- range $i, $arg := $f.Arguments}}, {{$arg.Name}} {{$imports.NameOf $arg.Type}}{{end -}}
	) ({{range $i, $ret := $f.Returns}}ret{{$i}} {{$imports.NameOf $ret.Type}}, {{end}}err error) {
	// Create and marshall the GRPC Request object
	req := &{{$service}}_{{$f.Name}}_Request{}
	req.marshall(
		{{- range $i, $arg := $f.Arguments}}{{if $i}}, {{end}}{{$arg.Name}}{{end -}}
	)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.{{$f.Name}}(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	{{range $i, $ret := $f.Returns}}{{if $i}}, {{end}}ret{{$i}}{{end}} = rsp.unmarshall()
	return
}
{{end}}
`

/*
Generates the file within its module
*/
func (client *clientArgs) GenerateCode(outputFilePath string) error {
	t, err := template.New("GRPCClientTemplate").Parse(clientTemplate)
	if err != nil {
		return err
	}

	f, err := os.OpenFile(outputFilePath, os.O_CREATE|os.O_RDWR, 0755)
	if err != nil {
		return err
	}

	return t.Execute(f, client)
}
