package docker

import (
	"strings"

	"gitlab.mpi-sws.org/cld/blueprint/blueprint/pkg/blueprint"
	"gitlab.mpi-sws.org/cld/blueprint/blueprint/pkg/core/container"
)

/*
This file contains the implementation of the golang.Container IRNode for Docker.

The `GenerateArtifacts` method generates the DOCKERFILE based on the container's contained nodes.
*/

var generatedModulePrefix = "blueprint/docker"

type DockerContainer struct {
	blueprint.IRNode
	container.ContainerNode
	container.ArtifactGenerator

	InstanceName   string
	ArgNodes       []blueprint.IRNode
	ContainedNodes []blueprint.IRNode
}

func newDockerContainerNode(name string) *DockerContainer {
	node := DockerContainer{}
	node.InstanceName = name
	return &node
}

func (node *DockerContainer) Name() string {
	return node.InstanceName
}

func (node *DockerContainer) String() string {
	var b strings.Builder
	b.WriteString(node.InstanceName)
	b.WriteString(" = DockerContainerNode(")
	var args []string
	for _, arg := range node.ArgNodes {
		args = append(args, arg.Name())
	}
	b.WriteString(strings.Join(args, ", "))
	b.WriteString(") {\n")
	var children []string
	for _, child := range node.ContainedNodes {
		children = append(children, child.String())
	}
	b.WriteString(blueprint.Indent(strings.Join(children, "\n"), 2))
	b.WriteString("\n}")
	return b.String()
}

func (node *DockerContainer) AddArg(argnode blueprint.IRNode) {
	node.ArgNodes = append(node.ArgNodes, argnode)
}

func (node *DockerContainer) AddChild(child blueprint.IRNode) error {
	node.ContainedNodes = append(node.ContainedNodes, child)
	return nil
}

var dockerTemplate = `# Blueprint: This file is auto-generated by the Blueprint docker plugin

FROM golang:1.18-buster AS build

WORKDIR {{.Name}}

{{- range $_, $child := .Children}}
WORKDIR {{.Name}}/{{$child.Name}}
RUN go mod tidy
RUN go mod download
RUN go build -o {{$child.Name}}
{{end}}

FROM gcr.io/distroless/base-debian10
WORKDIR /
COPY --from=build {{.Name}} {{.Name}}
ENTRYPOINT [{{.EntryPoint}}]
`
