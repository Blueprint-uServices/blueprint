package thriftcodegen

import (
	"fmt"
	"path/filepath"

	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gocode"
	"gitlab.mpi-sws.org/cld/blueprint/plugins/golang/gogen"
	"golang.org/x/exp/slog"
)

func GenerateClient(builder golang.ModuleBuilder, service *gocode.ServiceInterface, outputPackage string) error {
	pkg, err := builder.CreatePackage(outputPackage)
	if err != nil {
		return err
	}

	client := &clientArgs{
		Package: pkg,
		Service: service,
		Name:    service.BaseName + "_ThriftClient",
		Imports: gogen.NewImports(pkg.Name),
	}

	client.Imports.AddPackages(
		"context", "time",
		"github.com/apache/thrift/lib/go/thrift",
	)

	slog.Info(fmt.Sprintf("Generating %v/%v.go", client.Package.PackageName, client.Name))
	outputFile := filepath.Join(client.Package.Path, client.Name+".go")
	return gogen.ExecuteTemplateToFile("ThriftClient", clientTemplate, client, outputFile)
}

type clientArgs struct {
	Package golang.PackageInfo
	Service *gocode.ServiceInterface
	Name    string
	Imports *gogen.Imports
}

var clientTemplate = `// Blueprint: Auto-generated by Thrift Plugin
package {{.Package.ShortName}}

{{.Imports}}

type {{.Name}} struct {
	{{.Imports.NameOf .Service.UserType}}
	Client {{.Service.BaseName}}Client // The actual thrift-generated client
	Timeout time.Duration
}

func New_{{.Name}}(ctx context.Context, serverAddress string) (*{{.Name}}, error) {
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactor(true, true)
	var transportFactory thrift.TTransportFactory
	transportFactory = thrift.NewTTransportFactory()
	var transport thrift.TServerTransport
	var err error
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	transport, err = thrift.NewTSocketTimeout(handler.Address, duration, duration)
	if err != nil {
		return nil, err
	}
	transport, err =  transportFactory.GetTransport(transport)
	if err != nil {
		return nil, err
	}
	err = transport.Open()
	if err != nil {
		return nil, err
	}
	iprot := protocolFactory.GetProtocol(transport)
	oprot := protocolFactory.GetProtocol(transport)

	client := New{{.Service.BaseName}}Client(thrift.NewTStandardClient(iprot, oprot))
	handler := &{{.Name}}{}
	handler.Client = client
	handler.Timeout = duration
	return handler, nil
}

{{$service := .Service.Name -}}
{{$receiver := .Name -}}
{{- range $_, $f := .Service.Methods }}
func (client *{{$receiver}}) {{SignatureWithRetVars $f}} {
	// Create and marshall the thrift Request object
	req := &{{$service}}_{{$f.Name}}_Request{}
	req.marshall({{ArgVars $f}})

	ctx, cacnel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	rsp, err := client.Client.{{$f.Name}}(ctx, req)
	if err != nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	{{RetVarsEquals $f}} rsp.unmarshall()
	return
}
{{end}}
`
