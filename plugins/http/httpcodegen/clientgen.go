package httpcodegen

import (
	"fmt"
	"path/filepath"

	"github.com/blueprint-uservices/blueprint/plugins/golang"
	"github.com/blueprint-uservices/blueprint/plugins/golang/gocode"
	"github.com/blueprint-uservices/blueprint/plugins/golang/gogen"
	"golang.org/x/exp/slog"
)

// This function is used by the HTTP plugin to generate the client-side HTTP service
func GenerateClient(builder golang.ModuleBuilder, service *gocode.ServiceInterface, outputPackage string) error {
	pkg, err := builder.CreatePackage(outputPackage)
	if err != nil {
		return err
	}

	client := &clientArgs{
		Package: pkg,
		Service: service,
		Name:    service.BaseName + "_HTTPClient",
		Imports: gogen.NewImports(pkg.Name),
	}

	client.Imports.AddPackages(
		"net/http", "encoding/json", "context", "time", "net/url", "fmt", "io",
	)

	slog.Info(fmt.Sprintf("Generating %v/%v.go", client.Package.PackageName, client.Name))
	outputFile := filepath.Join(client.Package.Path, client.Name+".go")
	return gogen.ExecuteTemplateToFile("HTTPClient", clientTemplate, client, outputFile)
}

// Arguments to the template code
type clientArgs struct {
	Package golang.PackageInfo
	Service *gocode.ServiceInterface
	Name    string
	Imports *gogen.Imports
}

var clientTemplate = `// Blueprint: Auto-generated by the HTTP Plugin
package {{.Package.ShortName}}

{{.Imports}}

type {{.Name}} struct {
	Client *http.Client
	Timeout time.Duration
	ServerAddress string
}

func New_{{.Name}}(ctx context.Context, serverAddress string) (*{{.Name}}, error) {
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	client := &http.Client{
		Timeout: duration,
	}
	c := &{{.Name}}{}
	c.Client = client
	c.Timeout = duration
	c.ServerAddress = "http://" + serverAddress
	return c, nil
}

{{$service := .Service.Name -}}
{{$receiver := .Name -}}
{{- range $_, $f := .Service.Methods }}
func (client *{{$receiver}}) {{SignatureWithRetVars $f}} {
	vals := url.Values{}
	{{range $_, $arg := $f.Arguments}}
	{{if eq (NameOf $arg.Type) "string" -}}
	vals.Add("{{$arg.Name}}", {{$arg.Name}})
	{{- else -}}
	bytes_{{$arg.Name}}, err := json.Marshal({{$arg.Name}})
	if err != nil {
		return
	}
	vals.Add("{{$arg.Name}}", string(bytes_{{$arg.Name}}))
	{{- end}}
	{{end}}

	encoded_url, err := url.Parse(client.ServerAddress + "/{{$f.Name}}")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		{{range $i, $arg := $f.Returns}}
		Ret{{$i}} {{NameOf $arg.Type}}
		{{end}}
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	{{range $i, $arg := $f.Returns}}
	ret{{$i}} = response.Ret{{$i}}
	{{end}}
	return
}
{{end}}
`
