// Package kubernetes is a plugin for instantiating multiple container instances in a Kubernetes cluster.
//
// # Wiring Spec Usage
//
// To use the kubernetes plugin in your wiring spec, you can declare a Kuberenetes application, giving it a name and specifying which containers to include. Each container will be deployed in a separate pod in the Kubernetes cluster.
//
//	kubernetes.NewApplication(spec, "my_app", "my_container_1", "my_container_2")
//
// You can add more containers to an existing application:
//
//	kubernetes.AddContainerToDeployment(spec, "my_app", "my_container_3")
//
// You can also deploy multiple containers in a single pod:
//
//	kubernetes.AddPodToApplication(spec, "my_app", "my_container_4", "my_container_5")
//
// # Artifacts Generated
//
// During compilation, the plugin generates deployment.yaml and service.yaml files for each Pod.
//
// # Running Artifacts
//
// You need to have a working kubernetes cluster and `kubectl` installed.
// To deploy the pods to the cluster, use the following commands:
//
//	kubectl apply -f podName-deployment.yaml
//	kubectl apply -f podName-service.yaml
//
package kubernetes

import (
	"github.com/blueprint-uservices/blueprint/blueprint/pkg/coreplugins/namespaceutil"
	"github.com/blueprint-uservices/blueprint/blueprint/pkg/ir"
	"github.com/blueprint-uservices/blueprint/blueprint/pkg/wiring"
	"github.com/blueprint-uservices/blueprint/plugins/kubernetes/kubepod"
)

// [AddContainerToApplication] can be used by wiring specs to add more containers to a Kubernetes application
func AddContainerToApplication(spec wiring.WiringSpec, appName string, containerName string) {
	AddPodToApplication(spec, appName, containerName)
}

// [AddPodToApplication] can be used by wiring specs to bundle multiple containers in a single Kubernetes Pod and add that pod to an application
func AddPodToApplication(spec wiring.WiringSpec, appName string, containers ...string) {
	podName := kubepod.NewKubePod(spec, containers[0], containers...)
	namespaceutil.AddNodeTo[Application](spec, appName, podName)
}

// [NewApplication] can be used by wiring specs to create a Kubernetes Application that instantiates a number of kubernetes pod deployments as services. For each provided container, a new pod deployment is created with that container added to the pod.
//
// Further pod deployments for containers can be generated by calling [AddContainerToApplication].
//
// If one wishes to bundle multiple containers into a single pod, then that can be done by calling [AddPodToApplication]. Note that the containers provided to that must not have already been added to the application before.
//
// During compilation, generates the various configuration files for generating pod deployments and services.
//
// Returns appName
func NewApplication(spec wiring.WiringSpec, appName string, containers ...string) string {

	// If any children were provided in this call, add them to the app via a property
	for _, containerName := range containers {
		AddContainerToApplication(spec, appName, containerName)
	}

	spec.Define(appName, &Application{}, func(ns wiring.Namespace) (ir.IRNode, error) {
		application := &Application{AppName: appName}
		_, err := namespaceutil.InstantiateNamespace(ns, &applicationNamespace{application})
		return application, err
	})

	return appName
}

// A [wiring.NamespaceHandler] used to build kubernetes deployments
type applicationNamespace struct {
	*Application
}

// Implements [wiring.NamespaceHandler]
func (application *Application) Accepts(nodeType any) bool {
	_, isPodDeploymentNode := nodeType.(kubepod.PodDeployment)
	return isPodDeploymentNode
}

// Implements [wiring.NamespaceHandler]
func (application *Application) AddEdge(name string, edge ir.IRNode) error {
	application.Edges = append(application.Edges, edge)
	return nil
}

// Implements [wiring.NamespaceHandler]
func (application *Application) AddNode(name string, node ir.IRNode) error {
	application.Nodes = append(application.Nodes, node)
	return nil
}
